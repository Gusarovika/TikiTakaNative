{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"../../axios/axios-quiz\";\nimport firebase from \"../../firebase\";\nimport { FETCH_QUIZ_SUCCESS, FETCH_QUIZES_ERROR, FETCH_QUIZES_START, FETCH_QUIZES_SUCCESS, FINISH_QUIZ, QUIZ_NEXT_QUESTION, QUIZ_RETRY, QUIZ_SET_STATE, QUIZ_SET_TIMER } from \"./actionTypes\";\nexport function fetchQuizes() {\n  return function _callee(dispatch) {\n    var response, quizes, uniqueTopics;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(fetchQuizesStart());\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(axios.get('/quiz.json'));\n\n          case 4:\n            response = _context.sent;\n            quizes = [];\n            Object.keys(response.data).forEach(function (key, index) {\n              quizes.push({\n                id: key,\n                name: \"\" + response.data[key][0].topic\n              });\n            });\n\n            uniqueTopics = function uniqueTopics() {\n              var passedVals = [];\n              var newArr = quizes.sort(function () {\n                return Math.random() - 0.5;\n              }).filter(function (el) {\n                return !passedVals.includes(el.name) && passedVals.push(el.name);\n              });\n              return newArr;\n            };\n\n            dispatch(fetchQuizesSuccess(uniqueTopics()));\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch(fetchQuizesError(_context.t0));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 11]]);\n  };\n}\nexport function fetchQuizById(quizId) {\n  return function _callee2(dispatch) {\n    var response, quiz;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch(fetchQuizesStart());\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(axios.get(\"/quiz/\" + quizId + \".json\"));\n\n          case 4:\n            response = _context2.sent;\n            quiz = response.data;\n            dispatch(fetchQuizSuccess(quiz));\n            _context2.next = 12;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](1);\n            dispatch(fetchQuizesError(_context2.t0));\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 9]]);\n  };\n}\nexport function fetchQuizSuccess(quiz) {\n  return {\n    type: FETCH_QUIZ_SUCCESS,\n    quiz: quiz\n  };\n}\nexport function fetchQuizesStart() {\n  return {\n    type: FETCH_QUIZES_START\n  };\n}\nexport function fetchQuizesSuccess(quizes) {\n  return {\n    type: FETCH_QUIZES_SUCCESS,\n    quizes: quizes\n  };\n}\nexport function fetchQuizesError(e) {\n  return {\n    type: FETCH_QUIZES_ERROR,\n    error: e\n  };\n}\nexport function quizSetState(answerState, results) {\n  return {\n    type: QUIZ_SET_STATE,\n    answerState: answerState,\n    results: results\n  };\n}\nexport function finishQuiz() {\n  return {\n    type: FINISH_QUIZ\n  };\n}\nexport function quizNextQuestion(number) {\n  return {\n    type: QUIZ_NEXT_QUESTION,\n    number: number\n  };\n}\nexport function retryQuiz() {\n  return {\n    type: QUIZ_RETRY\n  };\n}\nexport function setTimer(second) {\n  return {\n    type: QUIZ_SET_TIMER,\n    second: second\n  };\n}\nexport function quizAnswerClick(answerId) {\n  return function (dispatch, getState) {\n    var state = getState().quiz;\n\n    if (state.answerState) {\n      var key = Object.keys(state.answerState)[0];\n\n      if (state.answerState[key] === 'success') {\n        return;\n      }\n    }\n\n    var question = state.quiz[state.activeQuestion];\n    var results = state.results;\n\n    if (question.rightAnswerId === answerId) {\n      if (!results[question.id]) {\n        results[question.id] = 'success';\n      }\n\n      dispatch(quizSetState(_defineProperty({}, answerId, 'success'), results));\n      var timeout = window.setTimeout(function () {\n        if (isQuizFinished(state)) {\n          dispatch(finishQuiz());\n          firebase.firestore().collection('users').doc(localStorage.userId).update({\n            games: firebase.firestore.FieldValue.increment(1),\n            rightAnswers: firebase.firestore.FieldValue.increment(Object.values(results).filter(function (elem) {\n              return elem === 'success';\n            }).length)\n          });\n          console.log(results);\n        } else {\n          dispatch(quizNextQuestion(state.activeQuestion + 1));\n        }\n\n        window.clearTimeout(timeout);\n      }, 500);\n    } else {\n      results[question.id] = 'error';\n      dispatch(quizSetState(_defineProperty({}, answerId, 'error'), results));\n\n      var _timeout = window.setTimeout(function () {\n        if (isQuizFinished(state)) {\n          dispatch(finishQuiz());\n          firebase.firestore().collection('users').doc(localStorage.userId).update({\n            games: firebase.firestore.FieldValue.increment(1),\n            rightAnswers: firebase.firestore.FieldValue.increment(Object.values(results).filter(function (elem) {\n              return elem === 'success';\n            }).length)\n          });\n        } else {\n          dispatch(quizNextQuestion(state.activeQuestion + 1));\n        }\n\n        window.clearTimeout(_timeout);\n      }, 500);\n    }\n  };\n}\n\nfunction isQuizFinished(state) {\n  return state.activeQuestion + 1 === state.quiz.length;\n}","map":{"version":3,"sources":["/home/oleg/learn/Week10/Day5/quiz/quiz-native/src/store/actions/quiz.js"],"names":["axios","firebase","FETCH_QUIZ_SUCCESS","FETCH_QUIZES_ERROR","FETCH_QUIZES_START","FETCH_QUIZES_SUCCESS","FINISH_QUIZ","QUIZ_NEXT_QUESTION","QUIZ_RETRY","QUIZ_SET_STATE","QUIZ_SET_TIMER","fetchQuizes","dispatch","fetchQuizesStart","get","response","quizes","Object","keys","data","forEach","key","index","push","id","name","topic","uniqueTopics","passedVals","newArr","sort","Math","random","filter","el","includes","fetchQuizesSuccess","fetchQuizesError","fetchQuizById","quizId","quiz","fetchQuizSuccess","type","e","error","quizSetState","answerState","results","finishQuiz","quizNextQuestion","number","retryQuiz","setTimer","second","quizAnswerClick","answerId","getState","state","question","activeQuestion","rightAnswerId","timeout","window","setTimeout","isQuizFinished","firestore","collection","doc","localStorage","userId","update","games","FieldValue","increment","rightAnswers","values","elem","length","console","log","clearTimeout"],"mappings":"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","sourcesContent":["import axios from '../../axios/axios-quiz'\nimport firebase from '../../firebase'\nimport {\n  FETCH_QUIZ_SUCCESS,\n  FETCH_QUIZES_ERROR,\n  FETCH_QUIZES_START,\n  FETCH_QUIZES_SUCCESS,\n  FINISH_QUIZ,\n  QUIZ_NEXT_QUESTION,\n  QUIZ_RETRY,\n  QUIZ_SET_STATE,\n  QUIZ_SET_TIMER,\n} from './actionTypes';\n\n\nexport function fetchQuizes() {\n  return async (dispatch) => {\n    dispatch(fetchQuizesStart());\n    try {\n      const response = await axios.get('/quiz.json');\n\n      const quizes = [];\n\n      Object.keys(response.data).forEach((key, index) => {\n        quizes.push({\n          id: key,\n          name: `${response.data[key][0].topic}`,\n        });\n      });\n\n      let uniqueTopics = () => {\n        let passedVals = [];\n        const newArr = quizes\n          .sort(() => Math.random() - 0.5)\n          .filter(\n            (el) => !passedVals.includes(el.name) && passedVals.push(el.name)\n          );\n        return newArr;\n      };\n\n      dispatch(fetchQuizesSuccess(uniqueTopics()));\n    } catch (e) {\n      dispatch(fetchQuizesError(e));\n    }\n  };\n}\n\nexport function fetchQuizById(quizId) {\n  return async (dispatch) => {\n    dispatch(fetchQuizesStart());\n\n    try {\n      const response = await axios.get(`/quiz/${quizId}.json`);\n      const quiz = response.data;\n\n      dispatch(fetchQuizSuccess(quiz));\n    } catch (e) {\n      dispatch(fetchQuizesError(e));\n    }\n  };\n}\n\nexport function fetchQuizSuccess(quiz) {\n  return {\n    type: FETCH_QUIZ_SUCCESS,\n    quiz,\n  };\n}\n\nexport function fetchQuizesStart() {\n  return {\n    type: FETCH_QUIZES_START,\n  };\n}\n\nexport function fetchQuizesSuccess(quizes) {\n  return {\n    type: FETCH_QUIZES_SUCCESS,\n    quizes,\n  };\n}\n\nexport function fetchQuizesError(e) {\n  return {\n    type: FETCH_QUIZES_ERROR,\n    error: e,\n  };\n}\n\nexport function quizSetState(answerState, results) {\n  return {\n    type: QUIZ_SET_STATE,\n    answerState,\n    results,\n  };\n}\n\nexport function finishQuiz() {\n  return {\n    type: FINISH_QUIZ,\n  };\n}\n\nexport function quizNextQuestion(number) {\n  return {\n    type: QUIZ_NEXT_QUESTION,\n    number,\n  };\n}\n\nexport function retryQuiz() {\n  return {\n    type: QUIZ_RETRY,\n  };\n}\n\nexport function setTimer(second) {\n  return {\n    type: QUIZ_SET_TIMER,\n    second,\n  };\n}\n\nexport function quizAnswerClick(answerId) {\n  return (dispatch, getState) => {\n    const state = getState().quiz;\n\n    if (state.answerState) {\n      const key = Object.keys(state.answerState)[0];\n      if (state.answerState[key] === 'success') {\n        return;\n      }\n    }\n\n    const question = state.quiz[state.activeQuestion];\n    const results = state.results;\n\n    if (question.rightAnswerId === answerId) {\n      if (!results[question.id]) {\n        results[question.id] = 'success';\n      }\n\n      dispatch(quizSetState({ [answerId]: 'success' }, results))\n\n      const timeout = window.setTimeout(() => {\n        if (isQuizFinished(state)) {\n          dispatch(finishQuiz())\n          firebase\n            .firestore()\n            .collection('users')\n            .doc(localStorage.userId)\n            .update({\n              games: firebase.firestore.FieldValue.increment(1),\n              rightAnswers: firebase\n                .firestore.FieldValue.increment(\n                  Object.values(results).filter(\n                    elem => elem === 'success').length)\n            })\n          console.log(results)\n        } else {\n          dispatch(quizNextQuestion(state.activeQuestion + 1));\n        }\n        window.clearTimeout(timeout);\n      }, 500);\n    } else {\n      results[question.id] = 'error'\n      dispatch(quizSetState({ [answerId]: 'error' }, results))\n\n      const timeout = window.setTimeout(() => {\n        if (isQuizFinished(state)) {\n          dispatch(finishQuiz())\n          firebase\n            .firestore()\n            .collection('users')\n            .doc(localStorage.userId)\n            .update({\n              games: firebase.firestore.FieldValue.increment(1),\n              rightAnswers: firebase\n                .firestore.FieldValue.increment(\n                  Object.values(results).filter(\n                    elem => elem === 'success').length)\n            })\n        } else {\n          dispatch(quizNextQuestion(state.activeQuestion + 1));\n        }\n        window.clearTimeout(timeout);\n      }, 500);\n    }\n  };\n}\n\nfunction isQuizFinished(state) {\n  return state.activeQuestion + 1 === state.quiz.length;\n}\n"]},"metadata":{},"sourceType":"module"}